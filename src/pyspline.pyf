  !    -*- f90 -*-
  ! Note: the context of this file is case sensitive.
  
  python module pyspline ! in 
  interface  ! in :pyspline

     ! --------------------- Curve Functions ------------------
!      subroutine compute_curve(s,x,t,k,n,nctl,ndim,coef,niter,tol,rms) ! in :test:compute_curve.f90
!        use lms_jacobian
!        use lsqrmodule,,only: lsqr
!        use lsqrcheckmodule,,only: acheck,xcheck
!        double precision dimension(n),intent(in,out) :: s
!        double precision dimension(n,ndim),intent(in),depend(n) :: x
!        double precision dimension(nctl+k),intent(in),depend(k,nctl) :: t
!        integer intent(in) :: k
!        integer optional,intent(in),check(len(s)>=n),depend(s) :: n=len(s)
!        integer optional,intent(in),check(shape(coef,0)==nctl),depend(coef) :: nctl=shape(coef,0)
!        integer optional,intent(in),check(shape(x,1)==ndim),depend(x) :: ndim=shape(x,1)
!        double precision dimension(nctl,ndim),intent(in,out),depend(ndim) :: coef
!        integer intent(in) :: niter
!        double precision intent(in) :: tol
!        double precision intent(out) :: rms
!      end subroutine compute_curve
   
  subroutine eval_curve(s,t,k,coef,nctl,ndim,val) ! in :test:eval_curve.f90
       double precision intent(in) :: s
       double precision dimension(nctl+k),intent(in),depend(k,nctl) :: t
       integer intent(in) :: k
       double precision dimension(nctl,ndim),intent(in) :: coef
       integer optional,intent(in),check(shape(coef,0)==nctl),depend(coef) :: nctl=shape(coef,0)
       integer optional,intent(in),check((shape(coef,1))==ndim),depend(coef) :: ndim=(shape(coef,1))
       double precision dimension(ndim),intent(out),depend(ndim) :: val
     end subroutine eval_curve

     subroutine eval_curve_v(s,t,k,coef,nctl,ndim,n,val) ! in :test:eval_curve_V.f90
       double precision dimension(n),intent(in) :: s
       double precision dimension(nctl+k),intent(in),depend(k,nctl) :: t
       integer intent(in) :: k
       double precision dimension(nctl,ndim),intent(in) :: coef
       integer optional,intent(in),check(shape(coef,0)==nctl),depend(coef) :: nctl=shape(coef,0)
       integer optional,intent(in),check(shape(coef,1)==ndim),depend(coef) :: ndim=shape(coef,1)
       integer optional,intent(in),check(len(s)>=n),depend(s) :: n=len(s)
       double precision dimension(n,ndim),intent(out),depend(n,ndim) :: val
     end subroutine eval_curve_v

     subroutine eval_curve_deriv(s,t,k,coef,nctl,ndim,val) ! in :test:eval_curve_deriv.f90
       double precision intent(in) :: s
       double precision dimension(nctl+k),intent(in),depend(k,nctl) :: t
       integer intent(in) :: k
       double precision dimension(nctl,ndim),intent(in) :: coef
       integer optional,intent(in),check(shape(coef,0)==nctl),depend(coef) :: nctl=shape(coef,0)
       integer optional,intent(in),check((shape(coef,1))==ndim),depend(coef) :: ndim=(shape(coef,1))
       double precision dimension(ndim),intent(out),depend(ndim) :: val
     end subroutine eval_curve_deriv

     subroutine eval_curve_deriv_v(s,t,k,coef,nctl,ndim,n,val) ! in :test:eval_curve_V.f90
       double precision dimension(n),intent(in) :: s
       double precision dimension(nctl+k),intent(in),depend(k,nctl) :: t
       integer intent(in) :: k
       double precision dimension(nctl,ndim),intent(in) :: coef
       integer optional,intent(in),check(shape(coef,0)==nctl),depend(coef) :: nctl=shape(coef,0)
       integer optional,intent(in),check(shape(coef,1)==ndim),depend(coef) :: ndim=shape(coef,1)
       integer optional,intent(in),check(len(s)>=n),depend(s) :: n=len(s)
       double precision dimension(n,ndim),intent(out),depend(n,ndim) :: val
     end subroutine eval_curve_deriv_v

     subroutine eval_curve_deriv2(s,t,k,coef,nctl,ndim,val) ! in :test:eval_curve_deriv.f90
       double precision intent(in) :: s
       double precision dimension(nctl+k),intent(in),depend(k,nctl) :: t
       integer intent(in) :: k
       double precision dimension(nctl,ndim),intent(in) :: coef
       integer optional,intent(in),check(shape(coef,0)==nctl),depend(coef) :: nctl=shape(coef,0)
       integer optional,intent(in),check((shape(coef,1))==ndim),depend(coef) :: ndim=(shape(coef,1))
       double precision dimension(ndim),intent(out),depend(ndim) :: val
     end subroutine eval_curve_deriv2

     subroutine eval_curve_deriv2_v(s,t,k,coef,nctl,ndim,n,val) ! in :test:eval_curve_V.f90
       double precision dimension(n),intent(in) :: s
       double precision dimension(nctl+k),intent(in),depend(k,nctl) :: t
       integer intent(in) :: k
       double precision dimension(nctl,ndim),intent(in) :: coef
       integer optional,intent(in),check(shape(coef,0)==nctl),depend(coef) :: nctl=shape(coef,0)
       integer optional,intent(in),check(shape(coef,1)==ndim),depend(coef) :: ndim=shape(coef,1)
       integer optional,intent(in),check(len(s)>=n),depend(s) :: n=len(s)
       double precision dimension(n,ndim),intent(out),depend(n,ndim) :: val
     end subroutine eval_curve_deriv2_v

     ! --------------------- Surface Function -----------------

!      subroutine compute_surface(x,u,v,tu,tv,ku,kv,nctlu,nctlv,nu,nv,ndim,coef,niter,tol,rms) ! in :test.pyf:compute_surface.f90
!        use lms_jacobian
!        use lsqrmodule,,only: lsqr
!        use lsqrcheckmodule,,only: acheck,xcheck
!        double precision dimension(nu,nv,ndim),intent(in) :: x
!        double precision dimension(nu,nv),intent(in,out),depend(nu,nv) :: u
!        double precision dimension(nu,nv),intent(in,out),depend(nu,nv) :: v
!        double precision dimension(nctlu+ku),intent(in),depend(ku,nctlu) :: tu
!        double precision dimension(nctlv+kv),intent(in),depend(kv,nctlv) :: tv
!        integer intent(in) :: ku
!        integer intent(in) :: kv
!        integer optional,intent(in),check(shape(coef,0)==nctlu),depend(coef) :: nctlu=shape(coef,0)
!        integer optional,intent(in),check(shape(coef,1)==nctlv),depend(coef) :: nctlv=shape(coef,1)
!        integer optional,intent(in),check(shape(x,0)==nu),depend(x) :: nu=shape(x,0)
!        integer optional,intent(in),check(shape(x,1)==nv),depend(x) :: nv=shape(x,1)
!        integer optional,intent(in),check(shape(x,2)==ndim),depend(x) :: ndim=shape(x,2)
!        double precision dimension(nctlu,nctlv,ndim),intent(in,out),depend(ndim) :: coef
!        integer intent(in) :: niter
!        double precision intent(in) :: tol
!        double precision intent(out) :: rms
!      end subroutine compute_surface

     subroutine eval_surface(u,v,tu,tv,ku,kv,coef,nctlu,nctlv,ndim,val) ! in :test:eval_surface.f90
       double precision intent(in) :: u
       double precision intent(in) :: v
       double precision dimension(nctlu+ku),intent(in),depend(ku,nctlu) :: tu
       double precision dimension(nctlv+kv),intent(in),depend(kv,nctlv) :: tv
       integer intent(in) :: ku
       integer intent(in) :: kv
       double precision dimension(nctlu,nctlv,ndim),intent(in) :: coef
       integer optional,intent(in),check(shape(coef,0)==nctlu),depend(coef) :: nctlu=shape(coef,0)
       integer optional,intent(in),check(shape(coef,1)==nctlv),depend(coef) :: nctlv=shape(coef,1)
       integer optional,intent(in),check(shape(coef,2)==ndim),depend(coef) :: ndim=shape(coef,2)
       double precision dimension(ndim),intent(out),depend(ndim) :: val
     end subroutine eval_surface

     subroutine eval_surface_v(u,v,tu,tv,ku,kv,coef,nctlu,nctlv,ndim,n,val) ! in :test:eval_surface.f90
       double precision dimension(n),intent(in) :: u
       double precision dimension(n),intent(in),depend(n) :: v
       double precision dimension(nctlu+ku),intent(in),depend(ku,nctlu) :: tu
       double precision dimension(nctlv+kv),intent(in),depend(kv,nctlv) :: tv
       integer intent(in) :: ku
       integer intent(in) :: kv
       double precision dimension(nctlu,nctlv,ndim),intent(in) :: coef
       integer optional,intent(in),check(shape(coef,0)==nctlu),depend(coef) :: nctlu=shape(coef,0)
       integer optional,intent(in),check(shape(coef,1)==nctlv),depend(coef) :: nctlv=shape(coef,1)
       integer optional,intent(in),check(shape(coef,2)==ndim),depend(coef) :: ndim=shape(coef,2)
       integer optional,intent(in),check(len(u)>=n),depend(u) :: n=len(u)
       double precision dimension(n,ndim),intent(out),depend(n,ndim) :: val
     end subroutine eval_surface_v

     subroutine eval_surface_m(u,v,tu,tv,ku,kv,coef,nctlu,nctlv,ndim,n,m,val) ! in :test:eval_surface.f90
       double precision dimension(n,m),intent(in) :: u
       double precision dimension(n,m),intent(in),depend(n,m) :: v
       double precision dimension(nctlu+ku),intent(in),depend(ku,nctlu) :: tu
       double precision dimension(nctlv+kv),intent(in),depend(kv,nctlv) :: tv
       integer intent(in) :: ku
       integer intent(in) :: kv
       double precision dimension(nctlu,nctlv,ndim),intent(in) :: coef
       integer optional,intent(in),check(shape(coef,0)==nctlu),depend(coef) :: nctlu=shape(coef,0)
       integer optional,intent(in),check(shape(coef,1)==nctlv),depend(coef) :: nctlv=shape(coef,1)
       integer optional,intent(in),check(shape(coef,2)==ndim),depend(coef) :: ndim=shape(coef,2)
       integer optional,intent(in),check(shape(u,0)==n),depend(u) :: n=shape(u,0)
       integer optional,intent(in),check(shape(u,1)==m),depend(u) :: m=shape(u,1)
       double precision dimension(n,m,ndim),intent(out),depend(n,m,ndim) :: val
     end subroutine eval_surface_m

     subroutine eval_surface_deriv(u,v,tu,tv,ku,kv,coef,nctlu,nctlv,ndim,val) ! in :test:eval_surface_deriv.f90
       double precision intent(in) :: u
       double precision intent(in) :: v
       double precision dimension(nctlu+ku),intent(in),depend(ku,nctlu) :: tu
       double precision dimension(nctlv+kv),intent(in),depend(kv,nctlv) :: tv
       integer intent(in) :: ku
       integer intent(in) :: kv
       double precision dimension(nctlu,nctlv,ndim),intent(in) :: coef
       integer optional,intent(in),check(shape(coef,0)==nctlu),depend(coef) :: nctlu=shape(coef,0)
       integer optional,intent(in),check(shape(coef,1)==nctlv),depend(coef) :: nctlv=shape(coef,1)
       integer optional,intent(in),check(shape(coef,2)==ndim),depend(coef) :: ndim=shape(coef,2)
       double precision dimension(2,ndim),intent(out),depend(ndim) :: val
     end subroutine eval_surface_deriv

     subroutine eval_surface_deriv_v(u,v,tu,tv,ku,kv,coef,nctlu,nctlv,ndim,n,val) ! in :test:eval_surface_deriv.f90
       double precision dimension(n),intent(in) :: u
       double precision dimension(n),intent(in),depend(n) :: v
       double precision dimension(nctlu+ku),intent(in),depend(ku,nctlu) :: tu
       double precision dimension(nctlv+kv),intent(in),depend(kv,nctlv) :: tv
       integer intent(in) :: ku
       integer intent(in) :: kv
       double precision dimension(nctlu,nctlv,ndim),intent(in) :: coef
       integer optional,intent(in),check(shape(coef,0)==nctlu),depend(coef) :: nctlu=shape(coef,0)
       integer optional,intent(in),check(shape(coef,1)==nctlv),depend(coef) :: nctlv=shape(coef,1)
       integer optional,intent(in),check(shape(coef,2)==ndim),depend(coef) :: ndim=shape(coef,2)
       integer optional,intent(in),check(len(u)>=n),depend(u) :: n=len(u)
       double precision dimension(n,2,ndim),intent(out),depend(n,ndim) :: val
     end subroutine eval_surface_deriv_v

     subroutine eval_surface_deriv_m(u,v,tu,tv,ku,kv,coef,nctlu,nctlv,ndim,n,m,val) ! in :test:eval_surface_deriv.f90
       double precision dimension(n,m),intent(in) :: u
       double precision dimension(n,m),intent(in),depend(n,m) :: v
       double precision dimension(nctlu+ku),intent(in),depend(ku,nctlu) :: tu
       double precision dimension(nctlv+kv),intent(in),depend(kv,nctlv) :: tv
       integer intent(in) :: ku
       integer intent(in) :: kv
       double precision dimension(nctlu,nctlv,ndim),intent(in) :: coef
       integer optional,intent(in),check(shape(coef,0)==nctlu),depend(coef) :: nctlu=shape(coef,0)
       integer optional,intent(in),check(shape(coef,1)==nctlv),depend(coef) :: nctlv=shape(coef,1)
       integer optional,intent(in),check(shape(coef,2)==ndim),depend(coef) :: ndim=shape(coef,2)
       integer optional,intent(in),check(shape(u,0)==n),depend(u) :: n=shape(u,0)
       integer optional,intent(in),check(shape(u,1)==m),depend(u) :: m=shape(u,1)
       double precision dimension(n,m,2,2,ndim),intent(out),depend(n,m,ndim) :: val
     end subroutine eval_surface_deriv_m

     subroutine eval_surface_deriv2(u,v,tu,tv,ku,kv,coef,nctlu,nctlv,ndim,val) ! in :test:eval_surface_deriv2.f90
       double precision intent(in) :: u
       double precision intent(in) :: v
       double precision dimension(nctlu+ku),intent(in),depend(ku,nctlu) :: tu
       double precision dimension(nctlv+kv),intent(in),depend(kv,nctlv) :: tv
       integer intent(in) :: ku
       integer intent(in) :: kv
       double precision dimension(nctlu,nctlv,ndim),intent(in) :: coef
       integer optional,intent(in),check(shape(coef,0)==nctlu),depend(coef) :: nctlu=shape(coef,0)
       integer optional,intent(in),check(shape(coef,1)==nctlv),depend(coef) :: nctlv=shape(coef,1)
       integer optional,intent(in),check(shape(coef,2)==ndim),depend(coef) :: ndim=shape(coef,2)
       double precision dimension(2,2,ndim),intent(out),depend(ndim) :: val
     end subroutine eval_surface_deriv2

     subroutine eval_surface_deriv2_v(u,v,tu,tv,ku,kv,coef,nctlu,nctlv,ndim,n,val) ! in :test:eval_surface_deriv2.f90
       double precision dimension(n),intent(in) :: u
       double precision dimension(n),intent(in),depend(n) :: v
       double precision dimension(nctlu+ku),intent(in),depend(ku,nctlu) :: tu
       double precision dimension(nctlv+kv),intent(in),depend(kv,nctlv) :: tv
       integer intent(in) :: ku
       integer intent(in) :: kv
       double precision dimension(nctlu,nctlv,ndim),intent(in) :: coef
       integer optional,intent(in),check(shape(coef,0)==nctlu),depend(coef) :: nctlu=shape(coef,0)
       integer optional,intent(in),check(shape(coef,1)==nctlv),depend(coef) :: nctlv=shape(coef,1)
       integer optional,intent(in),check(shape(coef,2)==ndim),depend(coef) :: ndim=shape(coef,2)
       integer optional,intent(in),check(len(u)>=n),depend(u) :: n=len(u)
       double precision dimension(n,2,2,ndim),intent(out),depend(n,ndim) :: val
     end subroutine eval_surface_deriv2_v

     subroutine eval_surface_deriv2_m(u,v,tu,tv,ku,kv,coef,nctlu,nctlv,ndim,n,m,val) ! in :test:eval_surface_deriv2.f90
       double precision dimension(n,m),intent(in) :: u
       double precision dimension(n,m),intent(in),depend(n,m) :: v
       double precision dimension(nctlu+ku),intent(in),depend(ku,nctlu) :: tu
       double precision dimension(nctlv+kv),intent(in),depend(kv,nctlv) :: tv
       integer intent(in) :: ku
       integer intent(in) :: kv
       double precision dimension(nctlu,nctlv,ndim),intent(in) :: coef
       integer optional,intent(in),check(shape(coef,0)==nctlu),depend(coef) :: nctlu=shape(coef,0)
       integer optional,intent(in),check(shape(coef,1)==nctlv),depend(coef) :: nctlv=shape(coef,1)
       integer optional,intent(in),check(shape(coef,2)==ndim),depend(coef) :: ndim=shape(coef,2)
       integer optional,intent(in),check(shape(u,0)==n),depend(u) :: n=shape(u,0)
       integer optional,intent(in),check(shape(u,1)==m),depend(u) :: m=shape(u,1)
       double precision dimension(n,m,2,2,ndim),intent(out),depend(n,m,ndim) :: val
     end subroutine eval_surface_deriv2_m

     ! ----------------  Volume Functions -----------------------
     subroutine volume_jacobian_wrap(u,v,w,tu,tv,tw,ku,kv,kw,nctlu,nctlv,nctlw,nu,nv,nw,vals,row_ptr,col_ind) ! in :test:compute_volume.f90
       double precision dimension(nu,nv,nw),intent(in) :: u
       double precision dimension(nu,nv,nw),intent(in),depend(nu,nv,nw) :: v
       double precision dimension(nu,nv,nw),intent(in),depend(nu,nv,nw) :: w
       double precision dimension(nctlu+ku),intent(in),depend(ku,nctlu) :: tu
       double precision dimension(nctlv+kv),intent(in),depend(kv,nctlv) :: tv
       double precision dimension(nctlw+kw),intent(in),depend(kw,nctlw) :: tw
       integer intent(in) :: ku
       integer intent(in) :: kv
       integer intent(in) :: kw
       integer intent(in) :: nctlu
       integer intent(in) :: nctlv
       integer intent(in) :: nctlw
       integer optional,intent(in),check(shape(u,0)==nu),depend(u) :: nu=shape(u,0)
       integer optional,intent(in),check(shape(u,1)==nv),depend(u) :: nv=shape(u,1)
       integer optional,intent(in),check(shape(u,2)==nw),depend(u) :: nw=shape(u,2)
       double precision dimension(nu*nv*nw*ku*kv*kw),intent(out),depend(ku,kv,kw,nu,nv,nw) :: vals
       integer dimension(nu*nv*nw+1),intent(out),depend(nu,nv,nw) :: row_ptr
       integer dimension(nu*nv*nw*ku*kv*kw),intent(out),depend(ku,kv,kw,nu,nv,nw) :: col_ind
     end subroutine volume_jacobian_wrap
    subroutine eval_volume(u,v,w,tu,tv,tw,ku,kv,kw,coef,nctlu,nctlv,nctlw,ndim,val) ! in :test:eval_volume.f90
       double precision intent(in) :: u
       double precision intent(in) :: v
       double precision intent(in) :: w
       double precision dimension(nctlu+ku),intent(in),depend(ku,nctlu) :: tu
       double precision dimension(nctlv+kv),intent(in),depend(kv,nctlv) :: tv
       double precision dimension(nctlw+kw),intent(in),depend(kw,nctlw) :: tw
       integer intent(in) :: ku
       integer intent(in) :: kv
       integer intent(in) :: kw
       double precision dimension(nctlu,nctlv,nctlw,ndim),intent(in) :: coef
       integer optional,intent(in),check(shape(coef,0)==nctlu),depend(coef) :: nctlu=shape(coef,0)
       integer optional,intent(in),check(shape(coef,1)==nctlv),depend(coef) :: nctlv=shape(coef,1)
       integer optional,intent(in),check(shape(coef,2)==nctlw),depend(coef) :: nctlw=shape(coef,2)
       integer optional,intent(in),check(shape(coef,3)==ndim),depend(coef) :: ndim=shape(coef,3)
       double precision dimension(ndim),intent(out),depend(ndim) :: val
     end subroutine eval_volume
     subroutine eval_volume_v(u,v,w,tu,tv,tw,ku,kv,kw,coef,nctlu,nctlv,nctlw,ndim,n,val) ! in :test:eval_volume.f90
       double precision dimension(n),intent(in) :: u
       double precision dimension(n),intent(in),depend(n) :: v
       double precision dimension(n),intent(in),depend(n) :: w
       double precision dimension(nctlu+ku),intent(in),depend(ku,nctlu) :: tu
       double precision dimension(nctlv+kv),intent(in),depend(kv,nctlv) :: tv
       double precision dimension(nctlw+kw),intent(in),depend(kw,nctlw) :: tw
       integer intent(in) :: ku
       integer intent(in) :: kv
       integer intent(in) :: kw
       double precision dimension(nctlu,nctlv,nctlw,ndim),intent(in) :: coef
       integer optional,intent(in),check(shape(coef,0)==nctlu),depend(coef) :: nctlu=shape(coef,0)
       integer optional,intent(in),check(shape(coef,1)==nctlv),depend(coef) :: nctlv=shape(coef,1)
       integer optional,intent(in),check(shape(coef,2)==nctlw),depend(coef) :: nctlw=shape(coef,2)
       integer optional,intent(in),check(shape(coef,3)==ndim),depend(coef) :: ndim=shape(coef,3)
       integer optional,intent(in),check(len(u)>=n),depend(u) :: n=len(u)
       double precision dimension(n,ndim),intent(out),depend(n,ndim) :: val
     end subroutine eval_volume_v
     subroutine eval_volume_m(u,v,w,tu,tv,tw,ku,kv,kw,coef,nctlu,nctlv,nctlw,ndim,n,m,val) ! in :test:eval_volume.f90
       double precision dimension(n,m),intent(in) :: u
       double precision dimension(n,m),intent(in),depend(n,m) :: v
       double precision dimension(n,m),intent(in),depend(n,m) :: w
       double precision dimension(nctlu+ku),intent(in),depend(ku,nctlu) :: tu
       double precision dimension(nctlv+kv),intent(in),depend(kv,nctlv) :: tv
       double precision dimension(nctlw+kw),intent(in),depend(kw,nctlw) :: tw
       integer intent(in) :: ku
       integer intent(in) :: kv
       integer intent(in) :: kw
       double precision dimension(nctlu,nctlv,nctlw,ndim),intent(in) :: coef
       integer optional,intent(in),check(shape(coef,0)==nctlu),depend(coef) :: nctlu=shape(coef,0)
       integer optional,intent(in),check(shape(coef,1)==nctlv),depend(coef) :: nctlv=shape(coef,1)
       integer optional,intent(in),check(shape(coef,2)==nctlw),depend(coef) :: nctlw=shape(coef,2)
       integer optional,intent(in),check(shape(coef,3)==ndim),depend(coef) :: ndim=shape(coef,3)
       integer optional,intent(in),check(shape(u,0)==n),depend(u) :: n=shape(u,0)
       integer optional,intent(in),check(shape(u,1)==m),depend(u) :: m=shape(u,1)
       double precision dimension(n,m,ndim),intent(out),depend(n,m,ndim) :: val
     end subroutine eval_volume_m
     subroutine eval_volume_t(u,v,w,tu,tv,tw,ku,kv,kw,coef,nctlu,nctlv,nctlw,ndim,n,m,l,val) ! in :test:eval_volume.f90
       double precision dimension(n,m,l),intent(in) :: u
       double precision dimension(n,m,l),intent(in),depend(n,m,l) :: v
       double precision dimension(n,m,l),intent(in),depend(n,m,l) :: w
       double precision dimension(nctlu+ku),intent(in),depend(ku,nctlu) :: tu
       double precision dimension(nctlv+kv),intent(in),depend(kv,nctlv) :: tv
       double precision dimension(nctlw+kw),intent(in),depend(kw,nctlw) :: tw
       integer intent(in) :: ku
       integer intent(in) :: kv
       integer intent(in) :: kw
       double precision dimension(nctlu,nctlv,nctlw,ndim),intent(in) :: coef
       integer optional,intent(in),check(shape(coef,0)==nctlu),depend(coef) :: nctlu=shape(coef,0)
       integer optional,intent(in),check(shape(coef,1)==nctlv),depend(coef) :: nctlv=shape(coef,1)
       integer optional,intent(in),check(shape(coef,2)==nctlw),depend(coef) :: nctlw=shape(coef,2)
       integer optional,intent(in),check(shape(coef,3)==ndim),depend(coef) :: ndim=shape(coef,3)
       integer optional,intent(in),check(shape(u,0)==n),depend(u) :: n=shape(u,0)
       integer optional,intent(in),check(shape(u,1)==m),depend(u) :: m=shape(u,1)
       integer optional,intent(in),check(shape(u,2)==l),depend(u) :: l=shape(u,2)
       double precision dimension(n,m,l,ndim),intent(out),depend(n,m,l,ndim) :: val
     end subroutine eval_volume_t
        
     ! ----------------  Projection Functions -----------------------
     subroutine point_curve(x0,t,k,coef,nctl,ndim,n,niter,eps1,eps2,s,diff) ! in :test:projections.f90
       double precision dimension(n,ndim),intent(in) :: x0
       double precision dimension(nctl+k),intent(in),depend(k,nctl) :: t
       integer intent(in) :: k
       double precision dimension(nctl,ndim),intent(in),depend(ndim) :: coef
       integer optional,intent(in),check(shape(coef,0)==nctl),depend(coef) :: nctl=shape(coef,0)
       integer optional,intent(in),check(shape(x0,1)==ndim),depend(x0) :: ndim=shape(x0,1)
       integer optional,intent(in),check(shape(x0,0)==n),depend(x0) :: n=shape(x0,0)
       double precision intent(in) :: niter
       double precision intent(in) :: eps1
       double precision intent(in) :: eps2
       double precision dimension(n),intent(in,out),depend(n) :: s
       double precision dimension(n,ndim),intent(out),depend(n,ndim) :: diff
     end subroutine point_curve
     subroutine point_surface(x0,tu,tv,ku,kv,coef,nctlu,nctlv,ndim,n,niter,eps1,eps2,u,v,diff) ! in :test:projections.f90
       double precision dimension(n,ndim),intent(in) :: x0
       double precision dimension(nctlu+ku),intent(in),depend(ku,nctlu) :: tu
       double precision dimension(nctlv+kv),intent(in),depend(kv,nctlv) :: tv
       integer intent(in) :: ku
       integer intent(in) :: kv
       double precision dimension(nctlu,nctlv,ndim),intent(in),depend(ndim) :: coef
       integer optional,intent(in),check(shape(coef,0)==nctlu),depend(coef) :: nctlu=shape(coef,0)
       integer optional,intent(in),check(shape(coef,1)==nctlv),depend(coef) :: nctlv=shape(coef,1)
       integer optional,intent(in),check(shape(x0,1)==ndim),depend(x0) :: ndim=shape(x0,1)
       integer optional,intent(in),check(shape(x0,0)==n),depend(x0) :: n=shape(x0,0)
       integer intent(in) :: niter
       double precision intent(in) :: eps1
       double precision intent(in) :: eps2
       double precision dimension(n),intent(in,out),depend(n) :: u
       double precision dimension(n),intent(in,out),depend(n) :: v
       double precision dimension(n,ndim),intent(out),depend(n,ndim) :: diff
     end subroutine point_surface

     subroutine point_volume(x0,tu,tv,tw,ku,kv,kw,coef,nctlu,nctlv,nctlw,ndim,n,niter,eps1,eps2,u,v,w,diff) ! in :test:projections.f90
       double precision dimension(n,ndim),intent(in) :: x0
       double precision dimension(nctlu+ku),intent(in),depend(ku,nctlu) :: tu
       double precision dimension(nctlv+kv),intent(in),depend(kv,nctlv) :: tv
       double precision dimension(nctlw+kw),intent(in),depend(kw,nctlw) :: tw
       integer intent(in) :: ku
       integer intent(in) :: kv
       integer intent(in) :: kw
       double precision dimension(nctlu,nctlv,nctlw,ndim),intent(in),depend(ndim) :: coef
       integer optional,intent(in),check(shape(coef,0)==nctlu),depend(coef) :: nctlu=shape(coef,0)
       integer optional,intent(in),check(shape(coef,1)==nctlv),depend(coef) :: nctlv=shape(coef,1)
       integer optional,intent(in),check(shape(coef,2)==nctlw),depend(coef) :: nctlw=shape(coef,2)
       integer optional,intent(in),check(shape(x0,1)==ndim),depend(x0) :: ndim=shape(x0,1)
       integer optional,intent(in),check(shape(x0,0)==n),depend(x0) :: n=shape(x0,0)
       integer intent(in) :: niter
       double precision intent(in) :: eps1
       double precision intent(in) :: eps2
       double precision dimension(n),intent(in,out),depend(n) :: u
       double precision dimension(n),intent(in,out),depend(n) :: v
       double precision dimension(n),intent(in,out),depend(n) :: w
       double precision dimension(n,ndim),intent(out),depend(n,ndim) :: diff
     end subroutine point_volume

     subroutine curve_curve(t1,k1,coef1,t2,k2,coef2,n1,n2,ndim,niter,eps1,eps2,s,t,diff) ! in :test:projections.f90
       double precision dimension(n1+k1),intent(in),depend(k1,n1) :: t1
       integer intent(in) :: k1
       double precision dimension(n1,ndim),intent(in) :: coef1
       double precision dimension(n2+k2),intent(in),depend(k2,n2) :: t2
       integer intent(in) :: k2
       double precision dimension(n2,ndim),intent(in),depend(ndim) :: coef2
       integer optional,intent(in),check(shape(coef1,0)==n1),depend(coef1) :: n1=shape(coef1,0)
       integer optional,intent(in),check(shape(coef2,0)==n2),depend(coef2) :: n2=shape(coef2,0)
       integer optional,intent(in),check(shape(coef1,1)==ndim),depend(coef1) :: ndim=shape(coef1,1)
       integer intent(in) :: niter
       double precision intent(in) :: eps1
       double precision intent(in) :: eps2
       double precision intent(in,out) :: s
       double precision intent(in,out) :: t
       double precision dimension(ndim),intent(out),depend(ndim) :: diff
     end subroutine curve_curve

     subroutine curve_surface(tc,kc,coefc,tu,tv,ku,kv,coefs,nctlc,nctlu,nctlv,ndim,niter,eps1,eps2,u,v,s,diff) ! in :test:projections.f90
       double precision dimension(nctlc+kc),intent(in),depend(kc,nctlc) :: tc
       integer intent(in) :: kc
       double precision dimension(nctlc,ndim),intent(in) :: coefc
       double precision dimension(nctlu+ku),intent(in),depend(ku,nctlu) :: tu
       double precision dimension(nctlv+kv),intent(in),depend(kv,nctlv) :: tv
       integer intent(in) :: ku
       integer intent(in) :: kv
       double precision dimension(nctlu,nctlv,ndim),intent(in),depend(ndim) :: coefs
       integer optional,intent(in),check(shape(coefc,0)==nctlc),depend(coefc) :: nctlc=shape(coefc,0)
       integer optional,intent(in),check(shape(coefs,0)==nctlu),depend(coefs) :: nctlu=shape(coefs,0)
       integer optional,intent(in),check(shape(coefs,1)==nctlv),depend(coefs) :: nctlv=shape(coefs,1)
       integer optional,intent(in),check(shape(coefc,1)==ndim),depend(coefc) :: ndim=shape(coefc,1)
       integer intent(in) :: niter
       double precision intent(in) :: eps1
       double precision intent(in) :: eps2
       double precision intent(in,out) :: u
       double precision intent(in,out) :: v
       double precision intent(in,out) :: s
       double precision dimension(ndim),intent(out),depend(ndim) :: diff
     end subroutine curve_surface

     ! ----------------- Misc Functions -----------------------------

     function poly_length(x,n,ndim) ! in :test:compute_curve.f90
       double precision dimension(n,ndim),intent(in) :: x
       integer optional,intent(in),check(shape(x,0)==n),depend(x) :: n=shape(x,0)
       integer optional,intent(in),check(shape(x,1)==ndim),depend(x) :: ndim=shape(x,1)
       double precision :: poly_length
     end function poly_length

     subroutine knots_lms(x,n,nctl,k,t) ! in :test:knots_lms.f90
       double precision dimension(n),intent(in) :: x
       integer optional,intent(in),check(len(x)>=n),depend(x) :: n=len(x)
       integer intent(in) :: nctl
       integer intent(in) :: k
       double precision dimension(nctl+k),intent(out),depend(nctl,k) :: t
     end subroutine knots_lms
     subroutine knots_interp(x,deriv_ptr,n,nd,k,t) ! in :test:knots_interp.f90
       double precision dimension(n),intent(in) :: x
       integer dimension(nd),intent(in) :: deriv_ptr
       integer optional,intent(in),check(len(x)>=n),depend(x) :: n=len(x)
       integer optional,intent(in),check(len(deriv_ptr)>=nd),depend(deriv_ptr) :: nd=len(deriv_ptr)
       integer intent(in) :: k
       double precision dimension(n+nd+k),intent(out),depend(n,nd,k) :: t
     end subroutine knots_interp
          
     subroutine intrv(xt,lxt,x,ilo,ileft,mflag) ! in :test:intrv.f
       double precision dimension(lxt),intent(in) :: xt
       integer optional,check(len(xt)>=lxt),depend(xt) :: lxt=len(xt)
       double precision,intent(in)  :: x
       integer,intent(in) :: ilo
       integer,intent(out) :: ileft
       integer,intent(out) :: mflag
     end subroutine intrv

     subroutine surface_jacobian_wrap(u,v,tu,tv,ku,kv,nctlu,nctlv,nu,nv,vals,row_ptr,col_ind) ! in :test:compute_surface.f90
       double precision dimension(nu,nv),intent(in) :: u
       double precision dimension(nu,nv),intent(in),depend(nu,nv) :: v
       double precision dimension(nctlu+ku),intent(in),depend(ku,nctlu) :: tu
       double precision dimension(nctlv+kv),intent(in),depend(kv,nctlv) :: tv
       integer intent(in) :: ku
       integer intent(in) :: kv
       integer intent(in) :: nctlu
       integer intent(in) :: nctlv
       integer optional,intent(in),check(shape(u,0)==nu),depend(u) :: nu=shape(u,0)
       integer optional,intent(in),check(shape(u,1)==nv),depend(u) :: nv=shape(u,1)
       double precision dimension(nu*nv*ku*kv),intent(out),depend(ku,kv,nu,nv) :: vals
       integer dimension(nu*nv+1),intent(out),depend(nu,nv) :: row_ptr
       integer dimension(nu*nv*ku*kv),intent(out),depend(ku,kv,nu,nv) :: col_ind
     end subroutine surface_jacobian_wrap

     subroutine updatecoefficients(type_bn,s_pos,links,coef,indicies,s,t,x,rotx,roty,rotz,scale,rot_type,nref,ns,ncoef) ! in :test:updatecoefficients.f90
       integer intent(in) :: type_bn
       double precision dimension(ns),intent(in) :: s_pos
       double precision dimension(ns,3),intent(in),depend(ns) :: links
       double precision dimension(ncoef,3),intent(in,out) :: coef
       integer dimension(ns),intent(in),depend(ns) :: indicies
       double precision dimension(nref),intent(in) :: s
       double precision dimension(nref + 2),intent(in),depend(nref) :: t
       double precision dimension(nref,3),intent(in),depend(nref) :: x
       double precision dimension(nref),intent(in),depend(nref) :: rotx
       double precision dimension(nref),intent(in),depend(nref) :: roty
       double precision dimension(nref),intent(in),depend(nref) :: rotz
       double precision dimension(nref),intent(in),depend(nref) :: scale
       integer intent(in) :: rot_type
       integer optional,check(len(s)>=nref),depend(s) :: nref=len(s)
       integer optional,check(len(s_pos)>=ns),depend(s_pos) :: ns=len(s_pos)
       integer optional,check(shape(coef,0)==ncoef),depend(coef) :: ncoef=shape(coef,0)
     end subroutine updatecoefficients

     subroutine getbasisptsurface(u,v,tu,tv,ku,kv,vals,col_ind,istart,l_index,nctlu,nctlv,nnz) ! in :test:getBasisPt.f90
       double precision intent(in) :: u
       double precision intent(in) :: v
       double precision dimension(nctlu+ku),intent(in),depend(ku,nctlu) :: tu
       double precision dimension(nctlv+kv),intent(in),depend(kv,nctlv) :: tv
       integer intent(in) :: ku
       integer intent(in) :: kv
       double precision dimension(nnz),intent(in,out) :: vals
       integer dimension(nnz),intent(in,out),depend(nnz) :: col_ind
       integer intent(in) :: istart
       integer dimension(nctlu,nctlv),intent(in) :: l_index
       integer optional,intent(in),check(shape(l_index,0)==nctlu),depend(l_index) :: nctlu=shape(l_index,0)
       integer optional,intent(in),check(shape(l_index,1)==nctlv),depend(l_index) :: nctlv=shape(l_index,1)
       integer optional,intent(in),check(len(vals)>=nnz),depend(vals) :: nnz=len(vals)
     end subroutine getbasispt

     subroutine getbasisptvolume(u,v,w,tu,tv,tw,ku,kv,kw,vals,col_ind,istart,l_index,nctlu,nctlv,nctlw,nnz) ! in :test:getBasisPt.f90
       double precision intent(in) :: u
       double precision intent(in) :: v
       double precision intent(in) :: w
       double precision dimension(nctlu+ku),intent(in),depend(ku,nctlu) :: tu
       double precision dimension(nctlv+kv),intent(in),depend(kv,nctlv) :: tv
       double precision dimension(nctlw+kw),intent(in),depend(kw,nctlw) :: tw
       integer intent(in) :: ku
       integer intent(in) :: kv
       integer intent(in) :: kw
       double precision dimension(nnz),intent(in,out) :: vals
       integer dimension(nnz),intent(in,out),depend(nnz) :: col_ind
       integer intent(in) :: istart
       integer dimension(nctlu,nctlv,nctlw),intent(in) :: l_index
       integer optional,intent(in),check(shape(l_index,0)==nctlu),depend(l_index) :: nctlu=shape(l_index,0)
       integer optional,intent(in),check(shape(l_index,1)==nctlv),depend(l_index) :: nctlv=shape(l_index,1)
       integer optional,intent(in),check(shape(l_index,2)==nctlw),depend(l_index) :: nctlw=shape(l_index,2)
       integer optional,intent(in),check(len(vals)>=nnz),depend(vals) :: nnz=len(vals)
     end subroutine getbasisptvolume

     subroutine updatecoefficients_c(type_bn,s_pos,links,coef,indicies,s,t,x,rotx,roty,rotz,scale,rot_type,nref,ns,ncoef) ! in :test:updatecoefficients_c.f90
       integer intent(in) :: type_bn
       double precision dimension(ns),intent(in) :: s_pos
       double precision dimension(ns,3),intent(in),depend(ns) :: links
       complex*16 dimension(ncoef,3),intent(in,out) :: coef
       integer dimension(ns),intent(in),depend(ns) :: indicies
       double precision dimension(nref),intent(in) :: s
       double precision dimension(nref + 2),intent(in),depend(nref) :: t
       complex*16 dimension(nref,3),intent(in),depend(nref) :: x
       complex*16 dimension(nref),intent(in),depend(nref) :: rotx
       complex*16 dimension(nref),intent(in),depend(nref) :: roty
       complex*16 dimension(nref),intent(in),depend(nref) :: rotz
       complex*16 dimension(nref),intent(in),depend(nref) :: scale
       integer intent(in) :: rot_type
       integer optional,check(len(s)>=nref),depend(s) :: nref=len(s)
       integer optional,check(len(s_pos)>=ns),depend(s_pos) :: ns=len(s_pos)
       integer optional,check(shape(coef,0)==ncoef),depend(coef) :: ncoef=shape(coef,0)
     end subroutine updatecoefficients_c

     subroutine surface_jacobian_wrap2(u,v,tu,tv,ku,kv,nctlu,nctlv,nu,nv,jac) ! in :test:compute_surface.f90
       double precision dimension(nu,nv),intent(in) :: u
       double precision dimension(nu,nv),intent(in),depend(nu,nv) :: v
       double precision dimension(nctlu+ku),intent(in),depend(ku,nctlu) :: tu
       double precision dimension(nctlv+kv),intent(in),depend(kv,nctlv) :: tv
       integer intent(in) :: ku
       integer intent(in) :: kv
       integer intent(in) :: nctlu
       integer intent(in) :: nctlv
       integer optional,intent(in),check(shape(u,0)==nu),depend(u) :: nu=shape(u,0)
       integer optional,intent(in),check(shape(u,1)==nv),depend(u) :: nv=shape(u,1)
       double precision dimension(nu*nv,nctlu*nctlv),intent(out),depend(nu,nv,nctlu,nctlv) :: jac
     end subroutine surface_jacobian_wrap2

     subroutine insertknot(u,r,t,k,coef,nctl,ndim,t_new,coef_new,ileft) ! in :test:insertKnot.f90
       double precision intent(in) :: u
       integer intent(in,out) :: r
       double precision dimension(nctl+k),intent(in),depend(k,nctl) :: t
       integer intent(in) :: k
       double precision dimension(nctl,ndim),intent(in) :: coef
       integer optional,intent(in),check(shape(coef,0)==nctl),depend(coef) :: nctl=shape(coef,0)
       integer optional,intent(in),check(shape(coef,1)==ndim),depend(coef) :: ndim=shape(coef,1)
       double precision dimension(nctl+k+r),intent(out),depend(r,k,nctl) :: t_new
       double precision dimension(nctl+r,ndim),intent(out),depend(r,nctl,ndim) :: coef_new
       integer intent(out) :: ileft
     end subroutine insertknot
     subroutine curve_jacobian_wrap(s,sd,t,k,nctl,n,nd,vals,row_ptr,col_ind) ! in :test:compute_curve.f90
       double precision dimension(n),intent(in) :: s
       double precision dimension(nd),intent(in) :: sd
       double precision dimension(nctl+k),intent(in),depend(k,nctl) :: t
       integer intent(in) :: k
       integer intent(in) :: nctl
       integer optional,intent(in),check(len(s)>=n),depend(s) :: n=len(s)
       integer optional,intent(in),check(len(sd)>=nd),depend(sd) :: nd=len(sd)
       double precision dimension((n+nd)*k),intent(inout),depend(k,n,nd) :: vals
       integer dimension(n+nd+1),intent(inout),depend(n,nd) :: row_ptr
       integer dimension((n+nd)*k),intent(inout),depend(k,n,nd) :: col_ind
     end subroutine curve_jacobian_wrap
     subroutine constr_jac(a_val,a_row_ptr,a_col_ind,b_val,b_row_ptr,b_col_ind,c_val,c_row_ptr,c_col_ind,am,an,cm,annz,bnnz,cnnz,j_val,j_col_ind,j_row_ptr) ! in :test:compute_curve.f90
       double precision dimension(annz),intent(in) :: a_val
       integer dimension(am + 1),intent(in) :: a_row_ptr
       integer dimension(annz),intent(in),depend(annz) :: a_col_ind
       double precision dimension(bnnz),intent(in) :: b_val
       integer dimension(am + 1),intent(in),depend(am) :: b_row_ptr
       integer dimension(bnnz),intent(in),depend(bnnz) :: b_col_ind
       double precision dimension(cnnz),intent(in) :: c_val
       integer dimension(cm + 1),intent(in) :: c_row_ptr
       integer dimension(cnnz),intent(in),depend(cnnz) :: c_col_ind
       integer optional,intent(in),check((len(a_row_ptr)-1)>=am),depend(a_row_ptr) :: am=(len(a_row_ptr)-1)
       integer intent(in) :: an
       integer optional,intent(in),check((len(c_row_ptr)-1)>=cm),depend(c_row_ptr) :: cm=(len(c_row_ptr)-1)
       integer optional,intent(in),check(len(a_val)>=annz),depend(a_val) :: annz=len(a_val)
       integer optional,intent(in),check(len(b_val)>=bnnz),depend(b_val) :: bnnz=len(b_val)
       integer optional,intent(in),check(len(c_val)>=cnnz),depend(c_val) :: cnnz=len(c_val)
      double precision dimension(annz+bnnz+cnnz),intent(out),depend(annz,bnnz,cnnz) :: j_val
       integer dimension(annz+bnnz+cnnz),intent(out),depend(annz,bnnz,cnnz) :: j_col_ind
       integer dimension(am+cm+1),intent(out),depend(am,cm) :: j_row_ptr
     end subroutine constr_jac
  
     subroutine curve_para_corr(t,k,s,coef,nctl,ndim,length,n,x) ! in :test:compute_curve.f90
       double precision dimension(nctl+k),intent(in),depend(k,nctl) :: t
       integer intent(in) :: k
       double precision dimension(n),intent(in,out) :: s
       double precision dimension(nctl,ndim),intent(in) :: coef
       integer optional,intent(in),check(shape(coef,0)==nctl),depend(coef) :: nctl=shape(coef,0)
       integer optional,intent(in),check(shape(coef,1)==ndim),depend(coef) :: ndim=shape(coef,1)
       double precision intent(in) :: length
       integer optional,intent(in),check(len(s)>=n),depend(s) :: n=len(s)
       double precision dimension(n,ndim),intent(in),depend(n,ndim) :: x
     end subroutine curve_para_corr
     
     subroutine para3d(x,n,m,l,ndim,s,u,v,w) ! in :test:parameterizations.f90
       double precision dimension(n,m,l,ndim),intent(in) :: x
       integer optional,intent(in),check(shape(x,0)==n),depend(x) :: n=shape(x,0)
       integer optional,intent(in),check(shape(x,1)==m),depend(x) :: m=shape(x,1)
       integer optional,intent(in),check(shape(x,2)==l),depend(x) :: l=shape(x,2)
       integer optional,intent(in),check(shape(x,3)==ndim),depend(x) :: ndim=shape(x,3)
       double precision dimension(n,m,l,ndim),intent(out),depend(n,m,l,ndim) :: s
       double precision dimension(n),intent(out),depend(n) :: u
       double precision dimension(m),intent(out),depend(m) :: v
       double precision dimension(l),intent(out),depend(l) :: w
     end subroutine para3d

 ! ----------------- Tecplot Binary Functions -----------------------------
  
     subroutine i_ordered(name,data,n,ndim) ! in :test:tecplot_functions.F90
       character*(*) intent(in) :: name
       double precision dimension(n,ndim),intent(in) :: data
       integer optional,check(shape(data,0)==n),depend(data) :: n=shape(data,0)
       integer optional,check(shape(data,1)==ndim),depend(data) :: ndim=shape(data,1)
     end subroutine i_ordered

     subroutine ij_ordered(name,data,n,m,ndim) ! in :test:tecplot_functions.F90
       character*(*) intent(in) :: name
       double precision dimension(n,m,ndim),intent(in) :: data
       integer optional,check(shape(data,0)==n),depend(data) :: n=shape(data,0)
       integer optional,check(shape(data,1)==m),depend(data) :: m=shape(data,1)
       integer optional,check(shape(data,2)==ndim),depend(data) :: ndim=shape(data,2)
     end subroutine ij_ordered

     subroutine ijk_ordered(name,data,n,m,l,ndim) ! in :test:tecplot_functions.F90
       character*(*) intent(in) :: name
       double precision dimension(n,m,l,ndim),intent(in) :: data
       integer optional,check(shape(data,0)==n),depend(data) :: n=shape(data,0)
       integer optional,check(shape(data,1)==m),depend(data) :: m=shape(data,1)
       integer optional,check(shape(data,2)==l),depend(data) :: l=shape(data,2)
       integer optional,check(shape(data,3)==ndim),depend(data) :: ndim=shape(data,3)
     end subroutine ijk_ordered

     subroutine tecplot_test(available)
       integer intent(out) :: available
     end subroutine tecplot_test

     subroutine open_tecplot(fname,ndim) ! in :test:tecplot_functions.F90
       character*(*) intent(in) :: fname
       integer intent(in)       :: ndim
     end subroutine open_tecplot

     subroutine close_tecplot()
     end subroutine close_tecplot`

  end interface
end program

  

!         subroutine getctlnormals(coef,l_index,g_index,normals,c_index,tx,ty,kx,ky,nx,ny,ncoef,n)
!             double precision dimension(ncoef,3),intent(in) :: coef
!             integer    dimension(n,2),intent(in)           :: l_index
!             integer    dimension(n), intent(in), depend(n) :: g_index
!             double precision dimension(n,3),intent(out),depend(n) :: normals
!             integer    dimension(nx,ny),intent(in) :: c_index
!             double precision dimension(kx+nx),intent(in),depend(kx,nx) :: tx
!             double precision dimension(ky+ny),intent(in),depend(ky,ny) :: ty
!             integer intent(in) :: kx
!             integer intent(in) :: ky
!             integer optional,check(shape(c_index,0)==nx),depend(c_index) :: nx=shape(c_index,0)
!             integer optional,check(shape(c_index,1)==ny),depend(c_index) :: ny=shape(c_index,1)
!             integer optional,check(shape(coef,0)==ncoef),depend(coef) :: ncoef = shape(coef,0)
!             integer optional,check(shape(l_index,0)==n),depend(l_index) :: n = shape(l_index,0)
!           end subroutine getctlnormals

!           subroutine curve_stiffness(t,n,k,alpha,beta,gpts,k0) ! in :test:curve_stiffness.f90
!             double precision dimension(n+k),intent(in),depend(n,k) :: t
!             integer optional,intent(in),check(len(gpts)>=n),depend(gpts) :: n=len(gpts)
!             integer intent(in) :: k
!             double precision intent(in) :: alpha
!             double precision intent(in) :: beta
!             double precision dimension(n),intent(in) :: gpts
!             double precision dimension(n,n),intent(out),depend(n,n) :: k0
!         end subroutine curve_stiffness
!         subroutine apply_constr(t,n,k,kstiff,constr,ndim,nconstr,knew,f) ! in :test:apply_constr.f90
!             double precision dimension(n+k),intent(in),depend(n,k) :: t
!             integer optional,intent(in),check(shape(kstiff,0)==n),depend(kstiff) :: n=shape(kstiff,0)
!             integer intent(in) :: k
!             double precision dimension(n,n),intent(in) :: kstiff
!             double precision dimension(nconstr,ndim + 2),intent(in) :: constr
!             integer optional,intent(in),check((shape(constr,1)-2)==ndim),depend(constr) :: ndim=(shape(constr,1)-2)
!             integer optional,intent(in),check(shape(constr,0)==nconstr),depend(constr) :: nconstr=shape(constr,0)
!             double precision dimension(n,n),intent(out),depend(n,n) :: knew
!             double precision dimension(n,ndim),intent(out),depend(n,ndim) :: f
!         end subroutine apply_constr

! This file was auto-generated with f2py (version:2_4422).
! See http://cens.ioc.ee/projects/f2py2e/


