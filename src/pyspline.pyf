  !    -*- f90 -*-
  ! Note: the context of this file is case sensitive.
  
  python module pyspline ! in 
  interface  ! in :pyspline
     subroutine knots_interp(x,deriv_ptr,n,nd,k,t) ! in :test:knots_interp.f90
       double precision dimension(n),intent(in) :: x
       integer dimension(nd),intent(in) :: deriv_ptr
       integer optional,intent(in),check(len(x)>=n),depend(x) :: n=len(x)
       integer optional,intent(in),check(len(deriv_ptr)>=nd),depend(deriv_ptr) :: nd=len(deriv_ptr)
       integer intent(in) :: k
       double precision dimension(n+nd+k),intent(out),depend(n,nd,k) :: t
     end subroutine knots_interp

     subroutine knots_lms(x,n,nctl,k,t) ! in :test:knots_lms.f90
       double precision dimension(n),intent(in) :: x
       integer optional,intent(in),check(len(x)>=n),depend(x) :: n=len(x)
       integer intent(in) :: nctl
       integer intent(in) :: k
       double precision dimension(nctl+k),intent(out),depend(nctl,k) :: t
     end subroutine knots_lms

     subroutine insertknot(u,r,t,k,coef,nctl,ndim,t_new,coef_new,ileft) ! in :test:insertKnot.f90
       double precision intent(in) :: u
       integer intent(inout) :: r
       double precision dimension(nctl+k),intent(in),depend(k,nctl) :: t
       integer intent(in) :: k
       double precision dimension(ndim,nctl),intent(in) :: coef
       integer optional,intent(in),check(shape(coef,1)==nctl),depend(coef) :: nctl=shape(coef,1)
       integer optional,intent(in),check(shape(coef,0)==ndim),depend(coef) :: ndim=shape(coef,0)
       double precision dimension(nctl+k+r),intent(out),depend(r,k,nctl) :: t_new
       double precision dimension(ndim,nctl+r),intent(out),depend(ndim,r,nctl) :: coef_new
       integer intent(out) :: ileft
     end subroutine insertknot

     subroutine intrv(xt,lxt,x,ilo,ileft,mflag) ! in :test:intrv.f
       double precision dimension(lxt),intent(in) :: xt
       integer optional,check(len(xt)>=lxt),depend(xt) :: lxt=len(xt)
       double precision,intent(in)  :: x
       integer,intent(in) :: ilo
       integer,intent(out) :: ileft
       integer,intent(out) :: mflag
     end subroutine intrv

     subroutine curve_jacobian_wrap(s,sd,t,k,nctl,n,nd,vals,row_ptr,col_ind) ! in :test:compute_curve.f90
       double precision dimension(n),intent(in) :: s
       double precision dimension(nd),intent(in) :: sd
       double precision dimension(nctl+k),intent(in),depend(k,nctl) :: t
       integer intent(in) :: k
       integer intent(in) :: nctl
       integer optional,intent(in),check(len(s)>=n),depend(s) :: n=len(s)
       integer optional,intent(in),check(len(sd)>=nd),depend(sd) :: nd=len(sd)
       double precision dimension((n+nd)*k),intent(in,out),depend(k,n,nd) :: vals
       integer dimension(n+nd+1),intent(in,out),depend(n,nd) :: row_ptr
       integer dimension((n+nd)*k),intent(in,out),depend(k,n,nd) :: col_ind
     end subroutine curve_jacobian_wrap

     subroutine constr_jac(a_val,a_row_ptr,a_col_ind,b_val,b_row_ptr,b_col_ind,c_val,c_row_ptr,c_col_ind,am,an,cm,annz,bnnz,cnnz,j_val,j_col_ind,j_row_ptr) ! in :test:compute_curve.f90
       double precision dimension(annz),intent(in) :: a_val
       integer dimension(am + 1),intent(in) :: a_row_ptr
       integer dimension(annz),intent(in),depend(annz) :: a_col_ind
       double precision dimension(bnnz),intent(in) :: b_val
       integer dimension(am + 1),intent(in),depend(am) :: b_row_ptr
       integer dimension(bnnz),intent(in),depend(bnnz) :: b_col_ind
       double precision dimension(cnnz),intent(in) :: c_val
       integer dimension(cm + 1),intent(in) :: c_row_ptr
       integer dimension(cnnz),intent(in),depend(cnnz) :: c_col_ind
       integer optional,intent(in),check((len(a_row_ptr)-1)>=am),depend(a_row_ptr) :: am=(len(a_row_ptr)-1)
       integer intent(in) :: an
       integer optional,intent(in),check((len(c_row_ptr)-1)>=cm),depend(c_row_ptr) :: cm=(len(c_row_ptr)-1)
       integer optional,intent(in),check(len(a_val)>=annz),depend(a_val) :: annz=len(a_val)
       integer optional,intent(in),check(len(b_val)>=bnnz),depend(b_val) :: bnnz=len(b_val)
       integer optional,intent(in),check(len(c_val)>=cnnz),depend(c_val) :: cnnz=len(c_val)
       double precision dimension(annz+bnnz+cnnz),intent(out),depend(annz,bnnz,cnnz) :: j_val
       integer dimension(annz+bnnz+cnnz),intent(out),depend(annz,bnnz,cnnz) :: j_col_ind
       integer dimension(am+cm+1),intent(out),depend(am,cm) :: j_row_ptr
     end subroutine constr_jac
     function poly_length(x,n,ndim) ! in :test:compute_curve.f90
       double precision dimension(ndim,n),intent(in) :: x
       integer optional,intent(in),check(shape(x,1)==n),depend(x) :: n=shape(x,1)
       integer optional,intent(in),check(shape(x,0)==ndim),depend(x) :: ndim=shape(x,0)
       double precision :: poly_length
     end function poly_length
     subroutine curve_para_corr(t,k,s,coef,nctl,ndim,length,n,x) ! in :test:compute_curve.f90
       double precision dimension(nctl+k),intent(in),depend(k,nctl) :: t
       integer intent(in) :: k
       double precision dimension(n),intent(in,out) :: s
       double precision dimension(ndim,nctl),intent(in) :: coef
       integer optional,intent(in),check(shape(coef,1)==nctl),depend(coef) :: nctl=shape(coef,1)
       integer optional,intent(in),check(shape(coef,0)==ndim),depend(coef) :: ndim=shape(coef,0)
       double precision intent(in) :: length
       integer optional,intent(in),check(len(s)>=n),depend(s) :: n=len(s)
       double precision dimension(ndim,n),intent(in),depend(ndim,n) :: x
     end subroutine curve_para_corr

     subroutine surface_jacobian_wrap(u,v,tu,tv,ku,kv,nctlu,nctlv,nu,nv,vals,row_ptr,col_ind) ! in :test:compute_surface.f90
       double precision dimension(nv,nu),intent(in) :: u
       double precision dimension(nv,nu),intent(in),depend(nv,nu) :: v
       double precision dimension(nctlu+ku),intent(in),depend(ku,nctlu) :: tu
       double precision dimension(nctlv+kv),intent(in),depend(kv,nctlv) :: tv
       integer intent(in) :: ku
       integer intent(in) :: kv
       integer intent(in) :: nctlu
       integer intent(in) :: nctlv
       integer optional,intent(in),check(shape(u,1)==nu),depend(u) :: nu=shape(u,1)
       integer optional,intent(in),check(shape(u,0)==nv),depend(u) :: nv=shape(u,0)
       double precision dimension(nu*nv*ku*kv),intent(out),depend(ku,kv,nu,nv) :: vals
       integer dimension(nu*nv+1),intent(out),depend(nu,nv) :: row_ptr
       integer dimension(nu*nv*ku*kv),intent(out),depend(ku,kv,nu,nv) :: col_ind
     end subroutine surface_jacobian_wrap

     subroutine para3d(x,n,m,l,ndim,s,u,v,w) ! in :test:parameterizations.f90
       double precision dimension(n,m,l,ndim),intent(in) :: x
       integer optional,intent(in),check(shape(x,0)==n),depend(x) :: n=shape(x,0)
       integer optional,intent(in),check(shape(x,1)==m),depend(x) :: m=shape(x,1)
       integer optional,intent(in),check(shape(x,2)==l),depend(x) :: l=shape(x,2)
       integer optional,intent(in),check(shape(x,3)==ndim),depend(x) :: ndim=shape(x,3)
       double precision dimension(n,m,l,ndim),intent(out),depend(n,m,l,ndim) :: s
       double precision dimension(n),intent(out),depend(n) :: u
       double precision dimension(m),intent(out),depend(m) :: v
       double precision dimension(l),intent(out),depend(l) :: w
     end subroutine para3d

     subroutine volume_jacobian_wrap(u,v,w,tu,tv,tw,ku,kv,kw,nctlu,nctlv,nctlw,nu,nv,nw,vals,row_ptr,col_ind) ! in :test:compute_volume.f90
       double precision dimension(nw,nv,nu),intent(in) :: u
       double precision dimension(nw,nv,nu),intent(in),depend(nw,nv,nu) :: v
       double precision dimension(nw,nv,nu),intent(in),depend(nw,nv,nu) :: w
       double precision dimension(nctlu+ku),intent(in),depend(ku,nctlu) :: tu
       double precision dimension(nctlv+kv),intent(in),depend(kv,nctlv) :: tv
       double precision dimension(nctlw+kw),intent(in),depend(kw,nctlw) :: tw
       integer intent(in) :: ku
       integer intent(in) :: kv
       integer intent(in) :: kw
       integer intent(in) :: nctlu
       integer intent(in) :: nctlv
       integer intent(in) :: nctlw
       integer optional,intent(in),check(shape(u,2)==nu),depend(u) :: nu=shape(u,2)
       integer optional,intent(in),check(shape(u,1)==nv),depend(u) :: nv=shape(u,1)
       integer optional,intent(in),check(shape(u,0)==nw),depend(u) :: nw=shape(u,0)
       double precision dimension(nu*nv*nw*ku*kv*kw),intent(out),depend(ku,kv,kw,nu,nv,nw) :: vals
       integer dimension(nu*nv*nw+1),intent(out),depend(nu,nv,nw) :: row_ptr
       integer dimension(nu*nv*nw*ku*kv*kw),intent(out),depend(ku,kv,kw,nu,nv,nw) :: col_ind
     end subroutine volume_jacobian_wrap

     subroutine eval_curve(s,t,k,coef,nctl,ndim,n,val) ! in :test:eval_curve.f90
       double precision dimension(n),intent(in) :: s
       double precision dimension(nctl+k),intent(in),depend(k,nctl) :: t
       integer intent(in) :: k
       double precision dimension(ndim,nctl),intent(in) :: coef
       integer optional,intent(in),check(shape(coef,1)==nctl),depend(coef) :: nctl=shape(coef,1)
       integer optional,intent(in),check(shape(coef,0)==ndim),depend(coef) :: ndim=shape(coef,0)
       integer optional,intent(in),check(len(s)>=n),depend(s) :: n=len(s)
       double precision dimension(ndim,n),intent(out),depend(ndim,n) :: val
     end subroutine eval_curve

     subroutine eval_curve_deriv(s,t,k,coef,nctl,ndim,val) ! in :test:eval_curve.f90
       double precision intent(in) :: s
       double precision dimension(nctl+k),intent(in),depend(k,nctl) :: t
       integer intent(in) :: k
       double precision dimension(ndim,nctl),intent(in) :: coef
       integer optional,intent(in),check(shape(coef,1)==nctl),depend(coef) :: nctl=shape(coef,1)
       integer optional,intent(in),check(shape(coef,0)==ndim),depend(coef) :: ndim=shape(coef,0)
       double precision dimension(ndim),intent(out),depend(ndim) :: val
     end subroutine eval_curve_deriv

     subroutine eval_curve_deriv2(s,t,k,coef,nctl,ndim,val) ! in :test:eval_curve.f90
       double precision intent(in) :: s
       double precision dimension(nctl+k),intent(in),depend(k,nctl) :: t
       integer intent(in) :: k
       double precision dimension(ndim,nctl),intent(in) :: coef
       integer optional,intent(in),check(shape(coef,1)==nctl),depend(coef) :: nctl=shape(coef,1)
       integer optional,intent(in),check(shape(coef,0)==ndim),depend(coef) :: ndim=shape(coef,0)
       double precision dimension(ndim),intent(out),depend(ndim) :: val
     end subroutine eval_curve_deriv2

     subroutine eval_curve_c(s,t,k,coef,nctl,ndim,val) ! in :test:eval_curve.f90
       double precision intent(in) :: s
       double precision dimension(nctl+k),intent(in),depend(k,nctl) :: t
       integer intent(in) :: k
       complex*16 dimension(ndim,nctl),intent(in) :: coef
       integer optional,intent(in),check(shape(coef,1)==nctl),depend(coef) :: nctl=shape(coef,1)
       integer optional,intent(in),check(shape(coef,0)==ndim),depend(coef) :: ndim=shape(coef,0)
       complex*16 dimension(ndim),intent(out),depend(ndim) :: val
     end subroutine eval_curve_c

     subroutine eval_surface(u,v,tu,tv,ku,kv,coef,nctlu,nctlv,ndim,n,m,val) ! in :test:eval_surface.f90
       double precision dimension(m,n),intent(in) :: u
       double precision dimension(m,n),intent(in),depend(m,n) :: v
       double precision dimension(nctlu+ku),intent(in),depend(ku,nctlu) :: tu
       double precision dimension(nctlv+kv),intent(in),depend(kv,nctlv) :: tv
       integer intent(in) :: ku
       integer intent(in) :: kv
       double precision dimension(ndim,nctlv,nctlu),intent(in) :: coef
       integer optional,intent(in),check(shape(coef,2)==nctlu),depend(coef) :: nctlu=shape(coef,2)
       integer optional,intent(in),check(shape(coef,1)==nctlv),depend(coef) :: nctlv=shape(coef,1)
       integer optional,intent(in),check(shape(coef,0)==ndim),depend(coef) :: ndim=shape(coef,0)
       integer optional,intent(in),check(shape(u,1)==n),depend(u) :: n=shape(u,1)
       integer optional,intent(in),check(shape(u,0)==m),depend(u) :: m=shape(u,0)
       double precision dimension(ndim,m,n),intent(out),depend(ndim,m,n) :: val
     end subroutine eval_surface
     
     subroutine eval_surface_deriv(u,v,tu,tv,ku,kv,coef,nctlu,nctlv,ndim,val) ! in :test:eval_surface.f90
       double precision intent(in) :: u
       double precision intent(in) :: v
       double precision dimension(nctlu+ku),intent(in),depend(ku,nctlu) :: tu
       double precision dimension(nctlv+kv),intent(in),depend(kv,nctlv) :: tv
       integer intent(in) :: ku
       integer intent(in) :: kv
       double precision dimension(ndim,nctlv,nctlu),intent(in) :: coef
       integer optional,intent(in),check(shape(coef,2)==nctlu),depend(coef) :: nctlu=shape(coef,2)
       integer optional,intent(in),check(shape(coef,1)==nctlv),depend(coef) :: nctlv=shape(coef,1)
       integer optional,intent(in),check(shape(coef,0)==ndim),depend(coef) :: ndim=shape(coef,0)
       double precision dimension(ndim,2),intent(out),depend(ndim) :: val
     end subroutine eval_surface_deriv
     subroutine eval_surface_deriv2(u,v,tu,tv,ku,kv,coef,nctlu,nctlv,ndim,val) ! in :test:eval_surface.f90
       double precision intent(in) :: u
       double precision intent(in) :: v
       double precision dimension(nctlu+ku),intent(in),depend(ku,nctlu) :: tu
       double precision dimension(nctlv+kv),intent(in),depend(kv,nctlv) :: tv
       integer intent(in) :: ku
       integer intent(in) :: kv
       double precision dimension(ndim,nctlv,nctlv),intent(in) :: coef
       integer intent(in) :: nctlu
       integer optional,intent(in),check(shape(coef,1)==nctlv),depend(coef) :: nctlv=shape(coef,1)
       integer optional,intent(in),check(shape(coef,0)==ndim),depend(coef) :: ndim=shape(coef,0)
       double precision dimension(ndim,2,2),intent(out),depend(ndim) :: val
     end subroutine eval_surface_deriv2
     subroutine eval_volume(u,v,w,tu,tv,tw,ku,kv,kw,coef,nctlu,nctlv,nctlw,ndim,n,m,l,val) ! in :test:eval_volume.f90
       double precision dimension(l,m,n),intent(in) :: u
       double precision dimension(l,m,n),intent(in),depend(l,m,n) :: v
       double precision dimension(l,m,n),intent(in),depend(l,m,n) :: w
       double precision dimension(nctlu+ku),intent(in),depend(ku,nctlu) :: tu
       double precision dimension(nctlv+kv),intent(in),depend(kv,nctlv) :: tv
       double precision dimension(nctlw+kw),intent(in),depend(kw,nctlw) :: tw
       integer intent(in) :: ku
       integer intent(in) :: kv
       integer intent(in) :: kw
       double precision dimension(ndim,nctlw,nctlv,nctlu),intent(in) :: coef
       integer optional,intent(in),check(shape(coef,3)==nctlu),depend(coef) :: nctlu=shape(coef,3)
       integer optional,intent(in),check(shape(coef,2)==nctlv),depend(coef) :: nctlv=shape(coef,2)
       integer optional,intent(in),check(shape(coef,1)==nctlw),depend(coef) :: nctlw=shape(coef,1)
       integer optional,intent(in),check(shape(coef,0)==ndim),depend(coef) :: ndim=shape(coef,0)
       integer optional,intent(in),check(shape(u,2)==n),depend(u) :: n=shape(u,2)
       integer optional,intent(in),check(shape(u,1)==m),depend(u) :: m=shape(u,1)
       integer optional,intent(in),check(shape(u,0)==l),depend(u) :: l=shape(u,0)
       double precision dimension(ndim,l,m,n),intent(out),depend(ndim,l,m,n) :: val
     end subroutine eval_volume
     subroutine eval_volume_deriv(u,v,w,tu,tv,tw,ku,kv,kw,coef,nctlu,nctlv,nctlw,ndim,val) ! in :test:eval_volume.f90
       double precision intent(in) :: u
       double precision intent(in) :: v
       double precision intent(in) :: w
       double precision dimension(nctlu+ku),intent(in),depend(ku,nctlu) :: tu
       double precision dimension(nctlv+kv),intent(in),depend(kv,nctlv) :: tv
       double precision dimension(nctlw+kw),intent(in),depend(kw,nctlw) :: tw
       integer intent(in) :: ku
       integer intent(in) :: kv
       integer intent(in) :: kw
       double precision dimension(ndim,nctlw,nctlv,nctlu),intent(in) :: coef
       integer optional,intent(in),check(shape(coef,3)==nctlu),depend(coef) :: nctlu=shape(coef,3)
       integer optional,intent(in),check(shape(coef,2)==nctlv),depend(coef) :: nctlv=shape(coef,2)
       integer optional,intent(in),check(shape(coef,1)==nctlw),depend(coef) :: nctlw=shape(coef,1)
       integer optional,intent(in),check(shape(coef,0)==ndim),depend(coef) :: ndim=shape(coef,0)
       double precision dimension(ndim,3),intent(out),depend(ndim) :: val
     end subroutine eval_volume_deriv
     subroutine eval_volume_deriv2(u,v,w,tu,tv,tw,ku,kv,kw,coef,nctlu,nctlv,nctlw,ndim,val) ! in :test:eval_volume.f90
       double precision intent(in) :: u
       double precision intent(in) :: v
       double precision intent(in) :: w
       double precision dimension(nctlu+ku),intent(in),depend(ku,nctlu) :: tu
       double precision dimension(nctlv+kv),intent(in),depend(kv,nctlv) :: tv
       double precision dimension(nctlw+kw),intent(in),depend(kw,nctlw) :: tw
       integer intent(in) :: ku
       integer intent(in) :: kv
       integer intent(in) :: kw
       double precision dimension(ndim,nctlw,nctlv,nctlu),intent(in) :: coef
       integer optional,intent(in),check(shape(coef,3)==nctlu),depend(coef) :: nctlu=shape(coef,3)
       integer optional,intent(in),check(shape(coef,2)==nctlv),depend(coef) :: nctlv=shape(coef,2)
       integer optional,intent(in),check(shape(coef,1)==nctlw),depend(coef) :: nctlw=shape(coef,1)
       integer optional,intent(in),check(shape(coef,0)==ndim),depend(coef) :: ndim=shape(coef,0)
       double precision dimension(ndim,3,3),intent(out),depend(ndim) :: val
     end subroutine eval_volume_deriv2

     subroutine quality_volume(x,nx,ny,nz,quality) ! in :test:quality.f90
       double precision dimension(3,nz,ny,nx),intent(in) :: x
       integer optional,intent(in),check(shape(x,3)==nx),depend(x) :: nx=shape(x,3)
       integer optional,intent(in),check(shape(x,2)==ny),depend(x) :: ny=shape(x,2)
       integer optional,intent(in),check(shape(x,1)==nz),depend(x) :: nz=shape(x,1)
       double precision dimension((nx-1)*(ny-1)*(nz-1)),intent(out),depend(nx,ny,nz) :: quality
     end subroutine quality_volume

     subroutine quality_volume_deriv(x,nx,ny,nz,offset,localindex,vals,col_ind,nquality) ! in :test:quality.f90
       double precision dimension(3,nz,ny,nx),intent(in) :: x
       integer optional,intent(in),check(shape(x,3)==nx),depend(x) :: nx=shape(x,3)
       integer optional,intent(in),check(shape(x,2)==ny),depend(x) :: ny=shape(x,2)
       integer optional,intent(in),check(shape(x,1)==nz),depend(x) :: nz=shape(x,1)
       integer intent(in) :: offset
       integer dimension(nz,ny,nx),intent(in),depend(nz,ny,nx) :: localindex
       double precision dimension(24 * nquality),intent(in,out) :: vals
       integer dimension(24 * nquality),intent(in,out),depend(nquality) :: col_ind
       integer optional,intent(in),check((len(vals))/(24)>=nquality),depend(vals) :: nquality=(len(vals))/(24)
     end subroutine quality_volume_deriv

     subroutine verify_quality_volume_deriv(x,nx,ny,nz) ! in :test:quality.f90
       double precision dimension(3,nz,ny,nx),intent(in) :: x
       integer optional,intent(in),check(shape(x,3)==nx),depend(x) :: nx=shape(x,3)
       integer optional,intent(in),check(shape(x,2)==ny),depend(x) :: ny=shape(x,2)
       integer optional,intent(in),check(shape(x,1)==nz),depend(x) :: nz=shape(x,1)
     end subroutine verify_quality_volume_deriv

     subroutine point_curve(x0,t,k,coef,nctl,ndim,n,niter,eps1,eps2,s,diff) ! in :test:projections.f90
       double precision dimension(ndim,n),intent(in) :: x0
       double precision dimension(nctl+k),intent(in),depend(k,nctl) :: t
       integer intent(in) :: k
       double precision dimension(ndim,nctl),intent(in),depend(ndim) :: coef
       integer optional,intent(in),check(shape(coef,1)==nctl),depend(coef) :: nctl=shape(coef,1)
       integer optional,intent(in),check(shape(x0,0)==ndim),depend(x0) :: ndim=shape(x0,0)
       integer optional,intent(in),check(shape(x0,1)==n),depend(x0) :: n=shape(x0,1)
       integer intent(in) :: niter
       double precision intent(in) :: eps1
       double precision intent(in) :: eps2
       double precision dimension(n),intent(in,out),depend(n) :: s
       double precision dimension(ndim,n),intent(out),depend(ndim,n) :: diff
     end subroutine point_curve

     subroutine point_surface(x0,tu,tv,ku,kv,coef,nctlu,nctlv,ndim,n,niter,eps1,eps2,u,v,diff) ! in :test:projections.f90
       double precision dimension(ndim,n),intent(in) :: x0
       double precision dimension(nctlu+ku),intent(in),depend(ku,nctlu) :: tu
       double precision dimension(nctlv+kv),intent(in),depend(kv,nctlv) :: tv
       integer intent(in) :: ku
       integer intent(in) :: kv
       double precision dimension(ndim,nctlv,nctlu),intent(in),depend(ndim) :: coef
       integer optional,intent(in),check(shape(coef,2)==nctlu),depend(coef) :: nctlu=shape(coef,2)
       integer optional,intent(in),check(shape(coef,1)==nctlv),depend(coef) :: nctlv=shape(coef,1)
       integer optional,intent(in),check(shape(x0,0)==ndim),depend(x0) :: ndim=shape(x0,0)
       integer optional,intent(in),check(shape(x0,1)==n),depend(x0) :: n=shape(x0,1)
       integer intent(in) :: niter
       double precision intent(in) :: eps1
       double precision intent(in) :: eps2
       double precision dimension(n),intent(in,out),depend(n) :: u
       double precision dimension(n),intent(in,out),depend(n) :: v
       double precision dimension(ndim,n),intent(out),depend(ndim,n) :: diff
     end subroutine point_surface

     subroutine point_volume(x0,tu,tv,tw,ku,kv,kw,coef,nctlu,nctlv,nctlw,ndim,n,niter,eps1,eps2,u,v,w,diff) ! in :test:projections.f90
       double precision dimension(ndim,n),intent(in) :: x0
       double precision dimension(nctlu+ku),intent(in),depend(ku,nctlu) :: tu
       double precision dimension(nctlv+kv),intent(in),depend(kv,nctlv) :: tv
       double precision dimension(nctlw+kw),intent(in),depend(kw,nctlw) :: tw
       integer intent(in) :: ku
       integer intent(in) :: kv
       integer intent(in) :: kw
       double precision dimension(ndim,nctlw,nctlv,nctlu),intent(in),depend(ndim) :: coef
       integer optional,intent(in),check(shape(coef,3)==nctlu),depend(coef) :: nctlu=shape(coef,3)
       integer optional,intent(in),check(shape(coef,2)==nctlv),depend(coef) :: nctlv=shape(coef,2)
       integer optional,intent(in),check(shape(coef,1)==nctlw),depend(coef) :: nctlw=shape(coef,1)
       integer optional,intent(in),check(shape(x0,0)==ndim),depend(x0) :: ndim=shape(x0,0)
       integer optional,intent(in),check(shape(x0,1)==n),depend(x0) :: n=shape(x0,1)
       integer intent(in) :: niter
       double precision intent(in) :: eps1
       double precision intent(in) :: eps2
       double precision dimension(n),intent(in,out),depend(n) :: u
       double precision dimension(n),intent(in,out),depend(n) :: v
       double precision dimension(n),intent(in,out),depend(n) :: w
       double precision dimension(n,ndim),intent(out),depend(n,ndim) :: diff
     end subroutine point_volume

     subroutine curve_curve(t1,k1,coef1,t2,k2,coef2,n1,n2,ndim,niter,eps1,eps2,s,t,diff) ! in :test:projections.f90
       double precision dimension(n1+k1),intent(in),depend(k1,n1) :: t1
       integer intent(in) :: k1
       double precision dimension(ndim,n1),intent(in) :: coef1
       double precision dimension(n2+k2),intent(in),depend(k2,n2) :: t2
       integer intent(in) :: k2
       double precision dimension(ndim,n2),intent(in),depend(ndim) :: coef2
       integer optional,intent(in),check(shape(coef1,1)==n1),depend(coef1) :: n1=shape(coef1,1)
       integer optional,intent(in),check(shape(coef2,1)==n2),depend(coef2) :: n2=shape(coef2,1)
       integer optional,intent(in),check(shape(coef1,0)==ndim),depend(coef1) :: ndim=shape(coef1,0)
       integer intent(in) :: niter
       double precision intent(in) :: eps1
       double precision intent(in) :: eps2
       double precision intent(in,out) :: s
       double precision intent(in,out) :: t
       double precision dimension(ndim),intent(out),depend(ndim) :: diff
     end subroutine curve_curve

     subroutine curve_surface(tc,kc,coefc,tu,tv,ku,kv,coefs,nctlc,nctlu,nctlv,ndim,niter,eps1,eps2,u,v,s,diff) ! in :test:projections.f90
       double precision dimension(nctlc+kc),intent(in),depend(kc,nctlc) :: tc
       integer intent(in) :: kc
       double precision dimension(ndim,nctlc),intent(in) :: coefc
       double precision dimension(nctlu+ku),intent(in),depend(ku,nctlu) :: tu
       double precision dimension(nctlv+kv),intent(in),depend(kv,nctlv) :: tv
       integer intent(in) :: ku
       integer intent(in) :: kv
       double precision dimension(ndim,nctlv,nctlu),intent(in),depend(ndim) :: coefs
       integer optional,intent(in),check(shape(coefc,1)==nctlc),depend(coefc) :: nctlc=shape(coefc,1)
       integer optional,intent(in),check(shape(coefs,2)==nctlu),depend(coefs) :: nctlu=shape(coefs,2)
       integer optional,intent(in),check(shape(coefs,1)==nctlv),depend(coefs) :: nctlv=shape(coefs,1)
       integer optional,intent(in),check(shape(coefc,0)==ndim),depend(coefc) :: ndim=shape(coefc,0)
       integer intent(in) :: niter
       double precision intent(in) :: eps1
       double precision intent(in) :: eps2
       double precision intent(in,out) :: u
       double precision intent(in,out) :: v
       double precision intent(in,out) :: s
       double precision dimension(ndim),intent(out),depend(ndim) :: diff
     end subroutine curve_surface

     subroutine line_plane(ia,vc,p0,v1,v2,n,sol,n_sol) ! in :test:projections.f90
       double precision dimension(3),intent(in) :: ia
       double precision dimension(3),intent(in) :: vc
       double precision dimension(3,n),intent(in) :: p0
       double precision dimension(3,n),intent(in),depend(n) :: v1
       double precision dimension(3,n),intent(in),depend(n) :: v2
       integer optional,intent(in),check(shape(p0,1)==n),depend(p0) :: n=shape(p0,1)
       double precision dimension(6,n),intent(out),depend(n) :: sol
       integer intent(out) :: n_sol
     end subroutine line_plane

     subroutine point_plane(pt,p0,v1,v2,n,sol,n_sol,best_sol) ! in :test:projections.f90
       double precision dimension(3),intent(in) :: pt
       double precision dimension(3,n),intent(in) :: p0
       double precision dimension(3,n),intent(in),depend(n) :: v1
       double precision dimension(3,n),intent(in),depend(n) :: v2
       integer optional,intent(in),check(shape(p0,1)==n),depend(p0) :: n=shape(p0,1)
       double precision dimension(6,n),intent(out),depend(n) :: sol
       integer intent(out) :: n_sol
       integer intent(out) :: best_sol
     end subroutine point_plane

     subroutine getbasisptsurface(u,v,tu,tv,ku,kv,vals,col_ind,istart,l_index,nctlu,nctlv,nnz) ! in :test:getBasisPt.f90
       double precision intent(in) :: u
       double precision intent(in) :: v
       double precision dimension(nctlu+ku),intent(in),depend(ku,nctlu) :: tu
       double precision dimension(nctlv+kv),intent(in),depend(kv,nctlv) :: tv
       integer intent(in) :: ku
       integer intent(in) :: kv
       double precision dimension(nnz),intent(in,out) :: vals
       integer dimension(nnz),intent(in,out),depend(nnz) :: col_ind
       integer intent(in) :: istart
       integer dimension(nctlv,nctlu),intent(in) :: l_index
       integer optional,intent(in),check(shape(l_index,1)==nctlu),depend(l_index) :: nctlu=shape(l_index,1)
       integer optional,intent(in),check(shape(l_index,0)==nctlv),depend(l_index) :: nctlv=shape(l_index,0)
       integer optional,intent(in),check(len(vals)>=nnz),depend(vals) :: nnz=len(vals)
     end subroutine getbasisptsurface

     subroutine getbasisptvolume(u,v,w,tu,tv,tw,ku,kv,kw,vals,col_ind,istart,l_index,nctlu,nctlv,nctlw,nnz) ! in :test:getBasisPt.f90
       double precision intent(in) :: u
       double precision intent(in) :: v
       double precision intent(in) :: w
       double precision dimension(nctlu+ku),intent(in),depend(ku,nctlu) :: tu
       double precision dimension(nctlv+kv),intent(in),depend(kv,nctlv) :: tv
       double precision dimension(nctlw+kw),intent(in),depend(kw,nctlw) :: tw
       integer intent(in) :: ku
       integer intent(in) :: kv
       integer intent(in) :: kw
       double precision dimension(nnz),intent(in,out) :: vals
       integer dimension(nnz),intent(in,out),depend(nnz) :: col_ind
       integer intent(in) :: istart
       integer dimension(nctlw,nctlv,nctlu),intent(in) :: l_index
       integer optional,intent(in),check(shape(l_index,2)==nctlu),depend(l_index) :: nctlu=shape(l_index,2)
       integer optional,intent(in),check(shape(l_index,1)==nctlv),depend(l_index) :: nctlv=shape(l_index,1)
       integer optional,intent(in),check(shape(l_index,0)==nctlw),depend(l_index) :: nctlw=shape(l_index,0)
       integer optional,intent(in),check(len(vals)>=nnz),depend(vals) :: nnz=len(vals)
     end subroutine getbasisptvolume
     
     ! ----------------- Tecplot Binary Functions -----------------------------

     subroutine i_ordered(name,data,n,ndim) ! in :test:tecplot_functions.F90
       character*(*) intent(in) :: name
       double precision dimension(n,ndim),intent(in) :: data
       integer optional,check(shape(data,0)==n),depend(data) :: n=shape(data,0)
       integer optional,check(shape(data,1)==ndim),depend(data) :: ndim=shape(data,1)
     end subroutine i_ordered

     subroutine ij_ordered(name,data,n,m,ndim) ! in :test:tecplot_functions.F90
       character*(*) intent(in) :: name
       double precision dimension(n,m,ndim),intent(in) :: data
       integer optional,check(shape(data,0)==n),depend(data) :: n=shape(data,0)
       integer optional,check(shape(data,1)==m),depend(data) :: m=shape(data,1)
       integer optional,check(shape(data,2)==ndim),depend(data) :: ndim=shape(data,2)
     end subroutine ij_ordered

     subroutine ijk_ordered(name,data,n,m,l,ndim) ! in :test:tecplot_functions.F90
       character*(*) intent(in) :: name
       double precision dimension(n,m,l,ndim),intent(in) :: data
       integer optional,check(shape(data,0)==n),depend(data) :: n=shape(data,0)
       integer optional,check(shape(data,1)==m),depend(data) :: m=shape(data,1)
       integer optional,check(shape(data,2)==l),depend(data) :: l=shape(data,2)
       integer optional,check(shape(data,3)==ndim),depend(data) :: ndim=shape(data,3)
     end subroutine ijk_ordered

     subroutine tecplot_test(available)
       integer intent(out) :: available
     end subroutine tecplot_test

     subroutine open_tecplot(fname,ndim) ! in :test:tecplot_functions.F90
       character*(*) intent(in) :: fname
       integer intent(in)       :: ndim
     end subroutine open_tecplot

     subroutine close_tecplot()
     end subroutine close_tecplot

     ! ----------------- CGNS I/O -----------------------------
     subroutine cgns_test ! in :test:cgns_functions.F90
     end subroutine cgns_test
     subroutine open_cgns(filename,cg,nzones) ! in :test:cgns_functions.F90
       character*32 intent(in) :: filename
       integer intent(out) :: cg
       integer intent(out) :: nzones
     end subroutine open_cgns
     subroutine read_cgns_zone_shape(cg,zone,zoneshape) ! in :test:cgns_functions.F90
       integer intent(in) :: cg
       integer intent(in) :: zone
       integer dimension(3),intent(out) :: zoneshape
     end subroutine read_cgns_zone_shape

     subroutine read_cgns_zone(cg,zone,x,nx,ny,nz,facebcs) ! in :test:cgns_functions.F90
       integer intent(in) :: cg
       integer intent(in) :: zone
       double precision dimension(nx,ny,nz,3),intent(out),depend(nx,ny,nz) :: x
       integer intent(in) :: nx
       integer intent(in) :: ny
       integer intent(in) :: nz
       integer dimension(6),intent(out) :: facebcs
     end subroutine read_cgns_zone

     subroutine close_cgns(cg) 
       integer intent(in) :: cg
     end subroutine close_cgns


  end interface
end program



! This file was auto-generated with f2py (version:2_4422).
! See http://cens.ioc.ee/projects/f2py2e/


